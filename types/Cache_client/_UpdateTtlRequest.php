<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: cacheclient.proto

namespace Cache_client;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>cache_client._UpdateTtlRequest</code>
 */
class _UpdateTtlRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>bytes cache_key = 1;</code>
     */
    protected $cache_key = '';
    protected $update_ttl;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $cache_key
     *     @type int|string $increase_to_milliseconds
     *           Sets the ttl to this value only if it is an increase compared to the existing ttl
     *     @type int|string $decrease_to_milliseconds
     *           Sets the ttl to this value only if it is a decrease compared to the existing ttl
     *     @type int|string $overwrite_to_milliseconds
     *           Sets the ttl to this value unconditionally
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Cacheclient::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>bytes cache_key = 1;</code>
     * @return string
     */
    public function getCacheKey()
    {
        return $this->cache_key;
    }

    /**
     * Generated from protobuf field <code>bytes cache_key = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setCacheKey($var)
    {
        GPBUtil::checkString($var, False);
        $this->cache_key = $var;

        return $this;
    }

    /**
     * Sets the ttl to this value only if it is an increase compared to the existing ttl
     *
     * Generated from protobuf field <code>uint64 increase_to_milliseconds = 2;</code>
     * @return int|string
     */
    public function getIncreaseToMilliseconds()
    {
        return $this->readOneof(2);
    }

    public function hasIncreaseToMilliseconds()
    {
        return $this->hasOneof(2);
    }

    /**
     * Sets the ttl to this value only if it is an increase compared to the existing ttl
     *
     * Generated from protobuf field <code>uint64 increase_to_milliseconds = 2;</code>
     * @param int|string $var
     * @return $this
     */
    public function setIncreaseToMilliseconds($var)
    {
        GPBUtil::checkUint64($var);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * Sets the ttl to this value only if it is a decrease compared to the existing ttl
     *
     * Generated from protobuf field <code>uint64 decrease_to_milliseconds = 3;</code>
     * @return int|string
     */
    public function getDecreaseToMilliseconds()
    {
        return $this->readOneof(3);
    }

    public function hasDecreaseToMilliseconds()
    {
        return $this->hasOneof(3);
    }

    /**
     * Sets the ttl to this value only if it is a decrease compared to the existing ttl
     *
     * Generated from protobuf field <code>uint64 decrease_to_milliseconds = 3;</code>
     * @param int|string $var
     * @return $this
     */
    public function setDecreaseToMilliseconds($var)
    {
        GPBUtil::checkUint64($var);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * Sets the ttl to this value unconditionally
     *
     * Generated from protobuf field <code>uint64 overwrite_to_milliseconds = 4;</code>
     * @return int|string
     */
    public function getOverwriteToMilliseconds()
    {
        return $this->readOneof(4);
    }

    public function hasOverwriteToMilliseconds()
    {
        return $this->hasOneof(4);
    }

    /**
     * Sets the ttl to this value unconditionally
     *
     * Generated from protobuf field <code>uint64 overwrite_to_milliseconds = 4;</code>
     * @param int|string $var
     * @return $this
     */
    public function setOverwriteToMilliseconds($var)
    {
        GPBUtil::checkUint64($var);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getUpdateTtl()
    {
        return $this->whichOneof("update_ttl");
    }

}

